name: build-vsix

on:
  workflow_dispatch:
    branches: main
    inputs:
        tag:
          description: 'Release Tag. This is in the form x.y.z'
          required: true
jobs:
  build-vsix:
    runs-on: ubuntu-latest
    env:
      CI_COMMIT_AUTHOR: CentML
      CI_COMMIT_EMAIL: centml-machine-user@users.noreply.github.com
    steps:
      - name: Fetch repository
        uses: actions/checkout@v3
       
      - name: Set up node 
        uses: actions/setup-node@v3
        with:
          node-version: 18
      
      - name: Install Protoc
        uses: arduino/setup-protoc@v1

      - name: Install VSCE
        run: |
          npm install -g @vscode/vsce

      - name: Create release branch
        run: |
          git branch release/${{ github.event.inputs.tag }}

      - name: Update version number
        run: |
          pushd deepview-explore/
          npm version ${{ github.event.inputs.tag }}
          popd

      - name: Commit updated version number and tag it
        run: |
          git config --global user.name "${{ env.CI_COMMIT_AUTHOR }}"
          git config --global user.email "${{ env.CI_COMMIT_EMAIL }}"
          git commit -am "Release version ${{ github.event.inputs.tag }}"
          git push origin release/${{ github.event.inputs.tag }}
          git tag ${{ github.event.inputs.tag }}

      - name: Build VSIX
        run: |
          scripts/build_vsix.sh

      - name: Publish to VSCode Marketplace
        run: |
          vsce publish -p ${{ secrets.AZURE_PAT }} -i deepview-explore/deepview-explore-${{ github.event.inputs.tag}}.vsix
      
      - name: Publish a release
        run: |
          RELEASE_NOTES="$(git log $(git describe --abbrev=0 --tags --always).. --merges --pretty=format:"%s %b" | cut -f 4,7- -d ' ')"
          echo "Autogenerated Release Notes:"
          echo "$RELEASE_NOTES"
          RELEASE_ARTIFACTS=$(find ./deepview-explore -name "*${{ github.event.inputs.tag }}.vsix" -type f | paste -s -d ' ' - )
          VERSION_TAG="v${{ github.event.inputs.tag }}"
          gh auth login --with-token <<< "${{ secrets.GH_TOKEN }}"
          gh release create "$VERSION_TAG" \
                                  --title "$VERSION_TAG" \
                                  --notes "$RELEASE_NOTES" \
                                  --target "$GITHUB_SHA" \
                                  $RELEASE_ARTIFACTS
          gh pr create --title "Release $VERSION_TAG" --body "$RELEASE_NOTES"